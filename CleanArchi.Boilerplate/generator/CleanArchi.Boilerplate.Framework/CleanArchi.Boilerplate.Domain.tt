<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ include file="$(ProjectDir)DbHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)ModelAuto.ttinclude"	#>
<# var manager = new Manager(Host, GenerationEnvironment, true); #>
<# 
	var OutputPath1 =Path.GetDirectoryName(Path.GetDirectoryName(Path.GetDirectoryName(Host.TemplateFile+"..")+"..")+"..");
	OutputPath1=Path.Combine(OutputPath1,"src","Domain","Entities");
	if (!Directory.Exists(OutputPath1))
	{
	    Directory.CreateDirectory(OutputPath1);
	}
#>
<# foreach (var item in DbHelper.GetDbTablesNew(config.ConnectionString, config.DbDatabase,config.TableName))
   {
		 var tableName=item.ToString();
         
		manager.StartBlock(tableName+".cs",OutputPath1);//文件名
	   #>
using SqlSugar;
namespace CleanArchi.Boilerplate.Domain.Entities;
///<summary>
///<#=tableName#>
///</summary>
[SugarTable("<#=tableName#>")]	
<#
   var columns = DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, tableName);
   var primarykeycsharptype = DbHelper.GetCSharpTypeOfPrimaryKey(columns);
#>
public class <#=tableName#><# if(primarykeycsharptype!=""){#> : RootEntityTkey<<#=primarykeycsharptype#>> <#}#>
{
<# foreach(DbColumn column in columns){#>   <# if(column.IsPrimaryKey) continue;#>
	/// <summary>
    /// <#= column.Remark == "" ? column.ColumnName : column.Remark.Replace("\r\n"," ") #>
    /// </summary>
	<# if(!column.IsNullable) {#>[SugarColumn(<# if (column.CSharpType=="string"){#>Length = <#= column.CharLength#>, <#}#>IsNullable = true)]
	<# }#>public <#= column.CSharpType#><# if(column.CommonType.IsValueType && column.IsNullable){#>?<#}#> <#=column.ColumnName#> { get; set; }
<#
}
#> 
}
 
<#
   manager.EndBlock(); 
   }
  manager.Process(true);
   #>